{"version":3,"sources":["img/im1.jpg","img/dark.png","img/im2.jpg","img/im3.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","className","src","img","span","name","href","link","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","im1","dark","im2","im3","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,6JCmB5BC,MAff,SAAaC,GACX,OACE,yBAAKC,UAAU,SACX,yBAAKA,UAAU,QACb,yBAAKC,IAAKF,EAAMG,MAChB,6BACE,8BAAOH,EAAMI,OAEf,4BAAKJ,EAAMK,MACX,gCAAQ,uBAAGC,KAAMN,EAAMO,MAAf,iBCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oECRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,gCACE,uBAAGd,UAAU,UAAb,YAEF,kBAAC,EAAD,CACEE,IAAKa,IACLT,KAAK,+EACLF,KAAK,2BACLD,KAAK,8BAEP,kBAAC,EAAD,CAAKD,IAAKc,IAAMZ,KAAK,gBAAgBD,KAAK,8BAC1C,kBAAC,EAAD,CACED,IAAKe,IACLX,KAAK,+EACLF,KAAK,2BACLD,KAAK,8BAEP,kBAAC,EAAD,CAAKD,IAAKc,IAAMZ,KAAK,gBAAgBD,KAAK,8BAC1C,kBAAC,EAAD,CACED,IAAKgB,IACLZ,KAAK,+EACLF,KAAK,2BACLD,KAAK,8BAEP,kBAAC,EAAD,CAAKD,IAAKc,IAAMZ,KAAK,gBAAgBD,KAAK,8BAC1C,kBAAC,EAAD,CACED,IAAKa,IACLT,KAAK,+EACLF,KAAK,2BACLD,KAAK,8BAEP,kBAAC,EAAD,CACED,IAAKa,IACLT,KAAK,+EACLF,KAAK,2BACLD,KAAK,8BAEP,mEAEFgB,SAASC,eAAe,SDiFpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2fde25f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/im1.fb413d5c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dark.a1de92e8.png\";","module.exports = __webpack_public_path__ + \"static/media/im2.dbdae22a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/im3.e57d150d.jpg\";","import React from \"react\";\n\nimport \"./App.css\";\n\nfunction App(props) {\n  return (\n    <div className=\"cards\">\n        <div className=\"card\">\n          <img src={props.img} />\n          <div>\n            <span>{props.span}</span>\n          </div>\n          <h2>{props.name}</h2>\n          <button><a href={props.link}>Watch Now</a></button>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport im2 from \"./img/im2.jpg\";\nimport im1 from \"./img/im1.jpg\";\nimport im3 from \"./img/im3.jpg\";\nimport dark from \"./img/dark.png\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <header>\n      <a className=\"header\">NETFLIX</a>\n    </header>\n    <App\n      img={im1}\n      link=\"https://drive.google.com/drive/u/2/folders/1jHo5q3bZfqEgUvjiWoWXPsFExLoy_8n8\"\n      name=\"Stranger Things Season-1\"\n      span=\"A netflix original series\"\n    />\n    <App img={dark} name=\"Dark Season-1\" span=\"A netflix original series\" />\n    <App\n      img={im2}\n      link=\"https://drive.google.com/drive/u/2/folders/1ECvdrVB7i3gfhhU8D-PGlY5CUSKY3Skq\"\n      name=\"Stranger Things Season-2\"\n      span=\"A netflix original series\"\n    />\n    <App img={dark} name=\"Dark Season-1\" span=\"A netflix original series\" />\n    <App\n      img={im3}\n      link=\"https://drive.google.com/drive/u/2/folders/1Uw-vQS5q8QK-Bs7sv4Nm0KfyYm14Adta\"\n      name=\"Stranger Things Season-3\"\n      span=\"A netflix original series\"\n    />\n    <App img={dark} name=\"Dark Season-1\" span=\"A netflix original series\" />\n    <App\n      img={im1}\n      link=\"https://drive.google.com/drive/u/2/folders/1jHo5q3bZfqEgUvjiWoWXPsFExLoy_8n8\"\n      name=\"Stranger Things Season-1\"\n      span=\"A netflix original series\"\n    />\n    <App\n      img={im1}\n      link=\"https://drive.google.com/drive/u/2/folders/1jHo5q3bZfqEgUvjiWoWXPsFExLoy_8n8\"\n      name=\"Stranger Things Season-1\"\n      span=\"A netflix original series\"\n    />\n    <footer>All Rights Reserved To Netflix</footer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}